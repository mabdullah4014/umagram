// ignore_for_file: non_constant_identifier_names
// ignore_for_file: camel_case_types
// ignore_for_file: prefer_single_quotes

// This file is automatically generated. DO NOT EDIT, all your changes would be lost.
import 'package:umagram/dto/paid2/dto_paid2_entity.dart';
import 'package:umagram/generated/json/dto_paid2_entity_helper.dart';
import 'package:umagram/dto/free/dto_free_entity.dart';
import 'package:umagram/generated/json/dto_free_entity_helper.dart';
import 'package:umagram/dto/paid6/dto_paid6_entity.dart';
import 'package:umagram/generated/json/dto_paid6_entity_helper.dart';
import 'package:umagram/dto/paid5/dto_paid5_entity.dart';
import 'package:umagram/generated/json/dto_paid5_entity_helper.dart';
import 'package:umagram/dto/paid3/dto_paid3_entity.dart';
import 'package:umagram/generated/json/dto_paid3_entity_helper.dart';
import 'package:umagram/dto/fortune/dto_fortune_entity.dart';
import 'package:umagram/generated/json/dto_fortune_entity_helper.dart';
import 'package:umagram/dto/paid4/dto_paid4_entity.dart';
import 'package:umagram/generated/json/dto_paid4_entity_helper.dart';

class JsonConvert<T> {
	T fromJson(Map<String, dynamic> json) {
		return _getFromJson<T>(runtimeType, this, json);
	}

  Map<String, dynamic> toJson() {
		return _getToJson<T>(runtimeType, this);
  }

  static _getFromJson<T>(Type type, data, json) {
    switch (type) {
			case DtoPaid2Entity:
				return dtoPaid2EntityFromJson(data as DtoPaid2Entity, json) as T;
			case DtoPaid2QuestionnaireOutput:
				return dtoPaid2QuestionnaireOutputFromJson(data as DtoPaid2QuestionnaireOutput, json) as T;
			case DtoPaid2Questionnaire:
				return dtoPaid2QuestionnaireFromJson(data as DtoPaid2Questionnaire, json) as T;
			case DtoPaid2QuestionnaireAnswer:
				return dtoPaid2QuestionnaireAnswerFromJson(data as DtoPaid2QuestionnaireAnswer, json) as T;
			case DtoFreeEntity:
				return dtoFreeEntityFromJson(data as DtoFreeEntity, json) as T;
			case DtoFreeQuestionnaireOutput:
				return dtoFreeQuestionnaireOutputFromJson(data as DtoFreeQuestionnaireOutput, json) as T;
			case DtoFreeQuestionnaire:
				return dtoFreeQuestionnaireFromJson(data as DtoFreeQuestionnaire, json) as T;
			case DtoFreeQuestionnaireQuestionOutput:
				return dtoFreeQuestionnaireQuestionOutputFromJson(data as DtoFreeQuestionnaireQuestionOutput, json) as T;
			case DtoFreeQuestionnaireQuestion:
				return dtoFreeQuestionnaireQuestionFromJson(data as DtoFreeQuestionnaireQuestion, json) as T;
			case DtoFreeQuestionnaireQuestionsAnswer:
				return dtoFreeQuestionnaireQuestionsAnswerFromJson(data as DtoFreeQuestionnaireQuestionsAnswer, json) as T;
			case DtoPaid6Entity:
				return dtoPaid6EntityFromJson(data as DtoPaid6Entity, json) as T;
			case DtoPaid6QuestionnaireOutput:
				return dtoPaid6QuestionnaireOutputFromJson(data as DtoPaid6QuestionnaireOutput, json) as T;
			case DtoPaid6Questionnaire:
				return dtoPaid6QuestionnaireFromJson(data as DtoPaid6Questionnaire, json) as T;
			case DtoPaid5Entity:
				return dtoPaid5EntityFromJson(data as DtoPaid5Entity, json) as T;
			case DtoPaid5QuestionnaireOutput:
				return dtoPaid5QuestionnaireOutputFromJson(data as DtoPaid5QuestionnaireOutput, json) as T;
			case DtoPaid5Question:
				return dtoPaid5QuestionFromJson(data as DtoPaid5Question, json) as T;
			case DtoPaid5QuestionsAnswer:
				return dtoPaid5QuestionsAnswerFromJson(data as DtoPaid5QuestionsAnswer, json) as T;
			case DtoPaid3Entity:
				return dtoPaid3EntityFromJson(data as DtoPaid3Entity, json) as T;
			case DtoPaid3QuestionnaireOutput:
				return dtoPaid3QuestionnaireOutputFromJson(data as DtoPaid3QuestionnaireOutput, json) as T;
			case DtoPaid3Questionnaire:
				return dtoPaid3QuestionnaireFromJson(data as DtoPaid3Questionnaire, json) as T;
			case DtoFortuneEntity:
				return dtoFortuneEntityFromJson(data as DtoFortuneEntity, json) as T;
			case DtoFortuneQuestionnaireOutput:
				return dtoFortuneQuestionnaireOutputFromJson(data as DtoFortuneQuestionnaireOutput, json) as T;
			case DtoFortuneQuestion:
				return dtoFortuneQuestionFromJson(data as DtoFortuneQuestion, json) as T;
			case DtoFortuneQuestionsAnswer:
				return dtoFortuneQuestionsAnswerFromJson(data as DtoFortuneQuestionsAnswer, json) as T;
			case DtoPaid4Entity:
				return dtoPaid4EntityFromJson(data as DtoPaid4Entity, json) as T;
			case DtoPaid4Questionnaire:
				return dtoPaid4QuestionnaireFromJson(data as DtoPaid4Questionnaire, json) as T;    }
    return data as T;
  }

  static _getToJson<T>(Type type, data) {
		switch (type) {
			case DtoPaid2Entity:
				return dtoPaid2EntityToJson(data as DtoPaid2Entity);
			case DtoPaid2QuestionnaireOutput:
				return dtoPaid2QuestionnaireOutputToJson(data as DtoPaid2QuestionnaireOutput);
			case DtoPaid2Questionnaire:
				return dtoPaid2QuestionnaireToJson(data as DtoPaid2Questionnaire);
			case DtoPaid2QuestionnaireAnswer:
				return dtoPaid2QuestionnaireAnswerToJson(data as DtoPaid2QuestionnaireAnswer);
			case DtoFreeEntity:
				return dtoFreeEntityToJson(data as DtoFreeEntity);
			case DtoFreeQuestionnaireOutput:
				return dtoFreeQuestionnaireOutputToJson(data as DtoFreeQuestionnaireOutput);
			case DtoFreeQuestionnaire:
				return dtoFreeQuestionnaireToJson(data as DtoFreeQuestionnaire);
			case DtoFreeQuestionnaireQuestionOutput:
				return dtoFreeQuestionnaireQuestionOutputToJson(data as DtoFreeQuestionnaireQuestionOutput);
			case DtoFreeQuestionnaireQuestion:
				return dtoFreeQuestionnaireQuestionToJson(data as DtoFreeQuestionnaireQuestion);
			case DtoFreeQuestionnaireQuestionsAnswer:
				return dtoFreeQuestionnaireQuestionsAnswerToJson(data as DtoFreeQuestionnaireQuestionsAnswer);
			case DtoPaid6Entity:
				return dtoPaid6EntityToJson(data as DtoPaid6Entity);
			case DtoPaid6QuestionnaireOutput:
				return dtoPaid6QuestionnaireOutputToJson(data as DtoPaid6QuestionnaireOutput);
			case DtoPaid6Questionnaire:
				return dtoPaid6QuestionnaireToJson(data as DtoPaid6Questionnaire);
			case DtoPaid5Entity:
				return dtoPaid5EntityToJson(data as DtoPaid5Entity);
			case DtoPaid5QuestionnaireOutput:
				return dtoPaid5QuestionnaireOutputToJson(data as DtoPaid5QuestionnaireOutput);
			case DtoPaid5Question:
				return dtoPaid5QuestionToJson(data as DtoPaid5Question);
			case DtoPaid5QuestionsAnswer:
				return dtoPaid5QuestionsAnswerToJson(data as DtoPaid5QuestionsAnswer);
			case DtoPaid3Entity:
				return dtoPaid3EntityToJson(data as DtoPaid3Entity);
			case DtoPaid3QuestionnaireOutput:
				return dtoPaid3QuestionnaireOutputToJson(data as DtoPaid3QuestionnaireOutput);
			case DtoPaid3Questionnaire:
				return dtoPaid3QuestionnaireToJson(data as DtoPaid3Questionnaire);
			case DtoFortuneEntity:
				return dtoFortuneEntityToJson(data as DtoFortuneEntity);
			case DtoFortuneQuestionnaireOutput:
				return dtoFortuneQuestionnaireOutputToJson(data as DtoFortuneQuestionnaireOutput);
			case DtoFortuneQuestion:
				return dtoFortuneQuestionToJson(data as DtoFortuneQuestion);
			case DtoFortuneQuestionsAnswer:
				return dtoFortuneQuestionsAnswerToJson(data as DtoFortuneQuestionsAnswer);
			case DtoPaid4Questionnaire:
				return dtoPaid4QuestionnaireToJson(data as DtoPaid4Questionnaire);
			}
			return data as T;
		}
  //Go back to a single instance by type
	static _fromJsonSingle<M>( json) {
		String type = M.toString();
		if(type == (DtoPaid2Entity).toString()){
			return DtoPaid2Entity().fromJson(json);
		}	else if(type == (DtoPaid2QuestionnaireOutput).toString()){
			return DtoPaid2QuestionnaireOutput().fromJson(json);
		}	else if(type == (DtoPaid2Questionnaire).toString()){
			return DtoPaid2Questionnaire().fromJson(json);
		}	else if(type == (DtoPaid2QuestionnaireAnswer).toString()){
			return DtoPaid2QuestionnaireAnswer().fromJson(json);
		}	else if(type == (DtoFreeEntity).toString()){
			return DtoFreeEntity().fromJson(json);
		}	else if(type == (DtoFreeQuestionnaireOutput).toString()){
			return DtoFreeQuestionnaireOutput().fromJson(json);
		}	else if(type == (DtoFreeQuestionnaire).toString()){
			return DtoFreeQuestionnaire().fromJson(json);
		}	else if(type == (DtoFreeQuestionnaireQuestionOutput).toString()){
			return DtoFreeQuestionnaireQuestionOutput().fromJson(json);
		}	else if(type == (DtoFreeQuestionnaireQuestion).toString()){
			return DtoFreeQuestionnaireQuestion().fromJson(json);
		}	else if(type == (DtoFreeQuestionnaireQuestionsAnswer).toString()){
			return DtoFreeQuestionnaireQuestionsAnswer().fromJson(json);
		}	else if(type == (DtoPaid6Entity).toString()){
			return DtoPaid6Entity().fromJson(json);
		}	else if(type == (DtoPaid6QuestionnaireOutput).toString()){
			return DtoPaid6QuestionnaireOutput().fromJson(json);
		}	else if(type == (DtoPaid6Questionnaire).toString()){
			return DtoPaid6Questionnaire().fromJson(json);
		}	else if(type == (DtoPaid5Entity).toString()){
			return DtoPaid5Entity().fromJson(json);
		}	else if(type == (DtoPaid5QuestionnaireOutput).toString()){
			return DtoPaid5QuestionnaireOutput().fromJson(json);
		}	else if(type == (DtoPaid5Question).toString()){
			return DtoPaid5Question().fromJson(json);
		}	else if(type == (DtoPaid5QuestionsAnswer).toString()){
			return DtoPaid5QuestionsAnswer().fromJson(json);
		}	else if(type == (DtoPaid3Entity).toString()){
			return DtoPaid3Entity().fromJson(json);
		}	else if(type == (DtoPaid3QuestionnaireOutput).toString()){
			return DtoPaid3QuestionnaireOutput().fromJson(json);
		}	else if(type == (DtoPaid3Questionnaire).toString()){
			return DtoPaid3Questionnaire().fromJson(json);
		}	else if(type == (DtoFortuneEntity).toString()){
			return DtoFortuneEntity().fromJson(json);
		}	else if(type == (DtoFortuneQuestionnaireOutput).toString()){
			return DtoFortuneQuestionnaireOutput().fromJson(json);
		}	else if(type == (DtoFortuneQuestion).toString()){
			return DtoFortuneQuestion().fromJson(json);
		}	else if(type == (DtoFortuneQuestionsAnswer).toString()){
			return DtoFortuneQuestionsAnswer().fromJson(json);
		}	else if(type == (DtoPaid4Entity).toString()){
			return DtoPaid4Entity().fromJson(json);
		}	else if(type == (DtoPaid4Questionnaire).toString()){
			return DtoPaid4Questionnaire().fromJson(json);
		}	
		return null;
	}

  //list is returned by type
	static M _getListChildType<M>(List data) {
		if(List<DtoPaid2Entity>() is M){
			return data.map<DtoPaid2Entity>((e) => DtoPaid2Entity().fromJson(e)).toList() as M;
		}	else if(List<DtoPaid2QuestionnaireOutput>() is M){
			return data.map<DtoPaid2QuestionnaireOutput>((e) => DtoPaid2QuestionnaireOutput().fromJson(e)).toList() as M;
		}	else if(List<DtoPaid2Questionnaire>() is M){
			return data.map<DtoPaid2Questionnaire>((e) => DtoPaid2Questionnaire().fromJson(e)).toList() as M;
		}	else if(List<DtoPaid2QuestionnaireAnswer>() is M){
			return data.map<DtoPaid2QuestionnaireAnswer>((e) => DtoPaid2QuestionnaireAnswer().fromJson(e)).toList() as M;
		}	else if(List<DtoFreeEntity>() is M){
			return data.map<DtoFreeEntity>((e) => DtoFreeEntity().fromJson(e)).toList() as M;
		}	else if(List<DtoFreeQuestionnaireOutput>() is M){
			return data.map<DtoFreeQuestionnaireOutput>((e) => DtoFreeQuestionnaireOutput().fromJson(e)).toList() as M;
		}	else if(List<DtoFreeQuestionnaire>() is M){
			return data.map<DtoFreeQuestionnaire>((e) => DtoFreeQuestionnaire().fromJson(e)).toList() as M;
		}	else if(List<DtoFreeQuestionnaireQuestionOutput>() is M){
			return data.map<DtoFreeQuestionnaireQuestionOutput>((e) => DtoFreeQuestionnaireQuestionOutput().fromJson(e)).toList() as M;
		}	else if(List<DtoFreeQuestionnaireQuestion>() is M){
			return data.map<DtoFreeQuestionnaireQuestion>((e) => DtoFreeQuestionnaireQuestion().fromJson(e)).toList() as M;
		}	else if(List<DtoFreeQuestionnaireQuestionsAnswer>() is M){
			return data.map<DtoFreeQuestionnaireQuestionsAnswer>((e) => DtoFreeQuestionnaireQuestionsAnswer().fromJson(e)).toList() as M;
		}	else if(List<DtoPaid6Entity>() is M){
			return data.map<DtoPaid6Entity>((e) => DtoPaid6Entity().fromJson(e)).toList() as M;
		}	else if(List<DtoPaid6QuestionnaireOutput>() is M){
			return data.map<DtoPaid6QuestionnaireOutput>((e) => DtoPaid6QuestionnaireOutput().fromJson(e)).toList() as M;
		}	else if(List<DtoPaid6Questionnaire>() is M){
			return data.map<DtoPaid6Questionnaire>((e) => DtoPaid6Questionnaire().fromJson(e)).toList() as M;
		}	else if(List<DtoPaid5Entity>() is M){
			return data.map<DtoPaid5Entity>((e) => DtoPaid5Entity().fromJson(e)).toList() as M;
		}	else if(List<DtoPaid5QuestionnaireOutput>() is M){
			return data.map<DtoPaid5QuestionnaireOutput>((e) => DtoPaid5QuestionnaireOutput().fromJson(e)).toList() as M;
		}	else if(List<DtoPaid5Question>() is M){
			return data.map<DtoPaid5Question>((e) => DtoPaid5Question().fromJson(e)).toList() as M;
		}	else if(List<DtoPaid5QuestionsAnswer>() is M){
			return data.map<DtoPaid5QuestionsAnswer>((e) => DtoPaid5QuestionsAnswer().fromJson(e)).toList() as M;
		}	else if(List<DtoPaid3Entity>() is M){
			return data.map<DtoPaid3Entity>((e) => DtoPaid3Entity().fromJson(e)).toList() as M;
		}	else if(List<DtoPaid3QuestionnaireOutput>() is M){
			return data.map<DtoPaid3QuestionnaireOutput>((e) => DtoPaid3QuestionnaireOutput().fromJson(e)).toList() as M;
		}	else if(List<DtoPaid3Questionnaire>() is M){
			return data.map<DtoPaid3Questionnaire>((e) => DtoPaid3Questionnaire().fromJson(e)).toList() as M;
		}	else if(List<DtoFortuneEntity>() is M){
			return data.map<DtoFortuneEntity>((e) => DtoFortuneEntity().fromJson(e)).toList() as M;
		}	else if(List<DtoFortuneQuestionnaireOutput>() is M){
			return data.map<DtoFortuneQuestionnaireOutput>((e) => DtoFortuneQuestionnaireOutput().fromJson(e)).toList() as M;
		}	else if(List<DtoFortuneQuestion>() is M){
			return data.map<DtoFortuneQuestion>((e) => DtoFortuneQuestion().fromJson(e)).toList() as M;
		}	else if(List<DtoFortuneQuestionsAnswer>() is M){
			return data.map<DtoFortuneQuestionsAnswer>((e) => DtoFortuneQuestionsAnswer().fromJson(e)).toList() as M;
		}	else if(List<DtoPaid4Entity>() is M){
			return data.map<DtoPaid4Entity>((e) => DtoPaid4Entity().fromJson(e)).toList() as M;
		}	else if(List<DtoPaid4Questionnaire>() is M){
			return data.map<DtoPaid4Questionnaire>((e) => DtoPaid4Questionnaire().fromJson(e)).toList() as M;
		}
		return null;
	}

  static M fromJsonAsT<M>(json) {
    if (json is List) {
      return _getListChildType<M>(json);
    } else {
      return _fromJsonSingle<M>(json) as M;
    }
  }
}